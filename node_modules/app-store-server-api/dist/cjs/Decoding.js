"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeNotificationPayload = exports.decodeRenewalInfo = exports.decodeTransaction = exports.decodeTransactions = void 0;
var crypto_1 = require("crypto");
var jose = __importStar(require("jose"));
var AppleRootCertificate_1 = require("./AppleRootCertificate");
var Errors_1 = require("./Errors");
function decodeTransactions(signedTransactions, rootCertFingerprint) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, Promise.all(signedTransactions.map(function (transaction) { return decodeJWS(transaction, rootCertFingerprint); }))];
        });
    });
}
exports.decodeTransactions = decodeTransactions;
function decodeTransaction(transaction, rootCertFingerprint) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, decodeJWS(transaction, rootCertFingerprint)];
        });
    });
}
exports.decodeTransaction = decodeTransaction;
function decodeRenewalInfo(info, rootCertFingerprint) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, decodeJWS(info, rootCertFingerprint)];
        });
    });
}
exports.decodeRenewalInfo = decodeRenewalInfo;
function decodeNotificationPayload(payload, rootCertFingerprint) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, decodeJWS(payload, rootCertFingerprint)];
        });
    });
}
exports.decodeNotificationPayload = decodeNotificationPayload;
/**
 * Decodes and verifies an object signed by the App Store according to JWS.
 * See: https://developer.apple.com/documentation/appstoreserverapi/jwstransaction
 * @param token JWS token
 * @param rootCertFingerprint Root certificate to validate against. Defaults to Apple's G3 CA but can be overriden for testing purposes.
 */
function decodeJWS(token, rootCertFingerprint) {
    if (rootCertFingerprint === void 0) { rootCertFingerprint = AppleRootCertificate_1.APPLE_ROOT_CA_G3_FINGERPRINT; }
    return __awaiter(this, void 0, void 0, function () {
        var getKey, payload, decoded, json;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    getKey = function (protectedHeader, _token) { return __awaiter(_this, void 0, void 0, function () {
                        var certs;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            certs = (_b = (_a = protectedHeader.x5c) === null || _a === void 0 ? void 0 : _a.map(function (c) { return "-----BEGIN CERTIFICATE-----\n".concat(c, "\n-----END CERTIFICATE-----"); })) !== null && _b !== void 0 ? _b : [];
                            validateCertificates(certs, rootCertFingerprint);
                            return [2 /*return*/, jose.importX509(certs[0], "ES256")];
                        });
                    }); };
                    return [4 /*yield*/, jose.compactVerify(token, getKey)];
                case 1:
                    payload = (_a.sent()).payload;
                    decoded = new TextDecoder().decode(payload);
                    json = JSON.parse(decoded);
                    return [2 /*return*/, json];
            }
        });
    });
}
/**
 * Validates a certificate chain provided in the x5c field of a decoded header of a JWS.
 * The certificates must be valid and have been signed by the provided
 * @param certificates A chain of certificates
 * @param rootCertFingerprint Expected SHA256 signature of the root certificate
 * @throws {CertificateValidationError} if any of the validation checks fail
 */
function validateCertificates(certificates, rootCertFingerprint) {
    if (certificates.length === 0)
        throw new Errors_1.CertificateValidationError([]);
    var x509certs = certificates.map(function (c) { return new crypto_1.X509Certificate(c); });
    // Check dates
    var now = new Date();
    var datesValid = x509certs.every(function (c) { return new Date(c.validFrom) < now && now < new Date(c.validTo); });
    if (!datesValid)
        throw new Errors_1.CertificateValidationError(certificates);
    // Check that each certificate, except for the last, is issued by the subsequent one.
    if (certificates.length >= 2) {
        for (var i = 0; i < x509certs.length - 1; i++) {
            var subject = x509certs[i];
            var issuer = x509certs[i + 1];
            if (subject.checkIssued(issuer) === false || subject.verify(issuer.publicKey) === false) {
                throw new Errors_1.CertificateValidationError(certificates);
            }
        }
    }
    // Ensure that the last certificate in the chain is the expected root CA.
    if (x509certs[x509certs.length - 1].fingerprint256 !== rootCertFingerprint) {
        throw new Errors_1.CertificateValidationError(certificates);
    }
}
